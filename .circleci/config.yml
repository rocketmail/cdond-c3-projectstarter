version: 2.1

orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here
      #workflow-id:
        #type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]          
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # cat ~/project/backend/migration_file.txt
            # if grep -q "success" ~/project/backend/migrations_file.txt
            # then
            #     cd ~/project/backend
            #     npm install
            #     npm run migrations:revert
            # fi
            cd ~/project/backend
            npm install
            npm run migrations:revert
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end build
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
             # exit 1
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
             # exit 1
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-test
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end build
          command: |
             # Your code here
             cd frontend
             npm install
             npm audit fix --force
             npm audit fix --force
             npm audit --audit-level=critical
             # exit 1
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-scan

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --force
             npm audit fix --force
             npm audit --audit-level=critical
             # exit 1
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-scan
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "05:0b:92:eb:60:7b:e0:e8:c9:0a:cd:6c:9c:ee:ff:07"
      # attach workspace asdsdaf
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            # curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip  
            # sudo ./aws/install
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      #- image: circleci/node:14.18.1
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       pip install awscli
      - run:
          name: Run migrations
          command: |
            # Your code here
            pwd
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            pwd
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo "success" >> ~/project/backend/migration_file.txt
            else
                echo "failed" >> ~/project/backend/migration_file.txt
            fi
            cat ~/project/backend/migration_file.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration_file.txt
      # Here's where you will add some code to rollback on failure OK
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      #- image: amazon/aws-cli
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            # yum install -y curl npm tar gzip sudo
            # # Install Nodejs
            # curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            # yum install -y nodejs
            sudo apt -y update
            sudo apt install -y tar gzip curl unzip
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.11-rc-alpine
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint OK
      - add_ssh_keys:
          fingerprints:
            - "05:0b:92:eb:60:7b:e0:e8:c9:0a:cd:6c:9c:ee:ff:07"
      # attach workspace
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            pwd
            sudo apt -y update
            sudo apt install -y tar gzip curl unzip
            sudo apt install -y software-properties-common
            sudo apt install -y python3 python3-pip
            python3 -m pip -V
            pwd
            python3 -m pip install --upgrade pip setuptools wheel
            python3 -m pip install --user ansible
      - run:
          name: Install aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      #       apk update
      #       apk add --update ansible curl tar gzip sudo bash nodejs npm
      #       apk add python3 py3-pip
      #       pip install awscli
      #       # Install Nodejs
      #       # curl -sL https://deb.nodesource.com/setup_13.x | sudo bash -
      #       # yum install -y nodejs
      #       # apk add --update nodejs
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            # npm install typescript -g n
            # n 13.8.0
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - checkout
  #     - run: 
  #         name: Install dependencies
  #         command: |
  #           apk add --update curl
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
  #           export URL="http://${BACKEND_IP}:3030"
  #           echo ${URL}
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # Test if website exists
  #           if curl "${URL}/api/status" | grep "ok"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  #           echo ${URL}
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy_environment
  #     - revert-migrations
  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
  #           --tags project=udapeople
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy_environment
  #     - revert-migrations
  # cleanup:
  #     docker:
  #       # Docker image here
  #       - image: amazon/aws-cli
  #     steps:
  #       # Checkout code from git
  #       - checkout
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             # export OldWorkflowID="the id here"
  #             # export STACKS=[] #put the list of stacks here
  #             export OldWorkflowID=$(aws cloudformation \
  #                                       list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                                       --no-paginate --output text)
  #             echo OldWorkflowID: "${OldWorkflowID}"
  #             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
  #             ## Fetch the stack names
  #             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #             echo Stack names: "${STACKS[@]}"
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
